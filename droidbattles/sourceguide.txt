The BattleBots Source code structure

This document is intended to give you a basic overview of the structure and
functioning of the BattleBots source code. It contains short explanations of
the most important classes.

Abstract:

The basic structure of the classes can be described as such:

BattleBots-----------------------------------------------------\
      |              |               |            |            |
BatleMenus      Battlearea <---Botcreator  configurator   Docbrowser
                  |
        ----------------------
        |                    ^
   infowindows   CPU    screenobject
                  |       |     |
                  \--->Device  RAM

=================================================================================
BattleBots:
BattleBots is the class that is the main menu and starts any battles. It manages
tournaments and starts configurators and editors and any other part BB consists
of. Mostly, it only connects the menubuttons to functions that create the widget
of the part of BB that is to be started (editors, configurators, simple
battles). However, in tournaments the BattleBots class has a more active role.
it then starts the battles, collects information about how the battles end up,
maintains the result table and start the next battle in the tournament.

For each sort of single battle there are 3 functions involved:

-The function that creates the dialog where you choose bots
-The function that destroys the dialog if you click 'cancel'
-The function that starts the battle if you click 'OK'

For each sort of tournament there are these 3 functions, but also a fourth:

-A function that is executed each time a battle finishes

In addition to these you can access a Documentation browser, a botcreator, a
config editor and an about window. However, all of these are merely created by
the BattleBots class...

==================================================================================
Battlearea:
The battlearea is the most important part of BattleBots, here is where the
actual fighting takes place. It contains the screenobjects that take part in the
fighting, functions for communication with and between screenobjects,
infowindows about the battle, buttons that start,pause,singlestep the battle and
more...
Here are the most important functions:

void execute( )
This function contains most of the game engine. It is connected to a timer and
as such normally gets executed ~50 times a second. Each time this function is
executed one "step" in the battle is simulated.

The execute function does these things:
-Checks how many contestants are left
-Tells screenobjects to execute, paint/erase themselves.
-Checks if objects have collided (telling objects they have)
-Deletes and creates screenobjects
-Keeps scoretables
-Ends the battle
When a battle is finished  a signal (battledone(int,int)) is emitted. This
signal is used by the BattleBots class to receiveve information needed when
running tournaments.

void addscrobject( int owner,int X,int Y,int dir,int type,int arg1=0,int arg2=0, void *arg3=0 )
This function is called when a screenobject wants to add another object (for
example create a shot)

int devio( int bot,int dev,int choice,int arg1,int arg2 )
If some object needs to get information about some other object on the
battlefield, they call this function

void explosions( int x,int y,int rad,int strength,int whichobject )
The main part of the damage objects caused is checked by the execute( ) function
simply by checking if they collided, however, not all damage done fits into that
abstracton. If an object causes damage in an area in an explosion, it calls this
function.

==================================================================================
Screenobject:
Screenobjects are all objects that can be seen on the field of battle, for
example shots, explosions and bots. For this, a baseclass named screenobject
exists, which is inherited by all classes that represent specific objects.

They reimplement functions provided for painting and erasing themselves on
the battlearea. They also reimplement the execute( ) function. Every
screenobject get that function called once each cycle. Here follows a list with
the most important screenobject functions and their use:

void showobject( QWidget *buffer )
This function gets called by the battlearea when it wants the object to paint
itself in the screen. The function should then paint in the provided widget
buffer.

void eraseobject( QWidget *buffer )
Same, except the screenobject is expected to remove anything he has painted.

int changepos( double X,double Y )
Called when the object should be moved or positioned. If the screenobject
returns -1 from this, it is seen as a signal that the object should be deleted.
(Used by shots so that the get deleted when the move outside of the area).

int objhit( int type, int strength )
If two screenobjects collide, or one object should otherwise receive damage, the
objects gets this function executed. If the return value is 1, it's a signal that
the object should be deleted as a cause of the damage inflicted.

int execute( )
Executed once each round in gameplay. A return of -1 signals to battlearea it
should delete the object.

======================================================================================
Device:
Bots (and possibly other screenobjects) contains small hardware modules. The class
"device" is the baseclass for all of these modules. Their most important function is
the execute( ) function, generally executed once each round by the owning objects
execute( ) function... here is a list of the important functions.

void addinport( unsigned char port, unsigned short value )
The hardware devices generally gets to know how they should act by the inport orders.
When an outside object wants to send the device some order this function gets called.
The standard implementation merely puts the value on the "portstack" of the device.

void execute( )
Called by the owning screenobject, this function is the motor of the device. Generally
the device checks the ports to check for orders of what to do.

int getfromport( unsigned char port )
If the device has valuable info for other parts of the bot/object the standard way of
getting some info from a device is to call the getfromport function. The variable port
here will contain a value between 0-3.

========================================================================================
RAM:
The RAM-class is a special device for the bots, that's not inherited from the device
baseclass. Essentially, it provides functions for reading from and writing to the
virtual memory (as well as it contains this memory itself).

=======================================================================================
CPU:
Baseclass for CPU:s derived from device. Contains extra functions needed for CPU:s

=======================================================================================
createbot:
The createbot class is the class responsible for the creation and testing of bots.
The most important functions are:

createbot( )
Creates the window with all editing elements

assemble( )
Makes a .bot file from the code in the textwindow and the info in the hardware section.
The assembler is a single-pass assembler. (This function is in need of a complete
rewrite which will take place during the post 1.0 development)

startquick( )
Starts a battle between the bot in development and some other predefined bots.

=======================================================================================

